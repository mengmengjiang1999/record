from Crypto.Util.number import *
from random import choice, shuffle
import gmpy2
from math import sqrt
from secret import flag

def get_list(n):
    my_list, cnt, st = [], 0, [False]*n*10
    for i in range(2, n+1):
        if not st[i]:
            my_list.append(i)
            cnt += 1
        for j in range(n):
            if my_list[j] * i > n: 
                break
            st[my_list[j] * i] = True

            if i % my_list[j] == 0: 
                break
    return my_list

def get_prime(_, n1, n2, bound):
    my_list = get_list(n1)
    shuffle(my_list)
    my_list = my_list[:n2]
        # 打乱，从中选出一部分
    while True:
        p = 1
        while True:
            p *=  choice(my_list)
            if p.bit_length() > bound:
                break
        p += _
        if isPrime(p):
            return p

            
def start():
    bound = 500
    num1 = pow(10, 6)
    num2 = num1//20
    p1 = get_prime(1, num1, num2, bound)
    q1 = getPrime(bound)
    n1 = p1 * q1
    q2 = get_prime(-1, round(sqrt(num1)), round(sqrt(num2)), bound)
    p2 = getPrime(bound)
    n2 = p2 * q2
    r = getPrime(bound)
    n = p1 * q2 * r
    e = 65537
    m = bytes_to_long(flag)
    c = pow(m, e, n)
    return (p1, q1, q2, p2, n1, n2, n, e, c)

# p1-1是很多个小素数的乘积
# q1是随便来的素数
# q2+1是很多个小素数的乘积
# r是一个小于500的素数

p1, q1, q2, p2, n1, n2, n, e, c = start()

print(f"n1 = {n1}")
print(f"n2 = {n2}")
print(f"n = {n}")
print(f"e = {e}")
print(f"c = {c}")

# n1 = 32509937920108452706099222978031198053046977240732923211027190799808712561390169155364841105194594233029580635167477810369193036879340840248068937008881313273342215826772787212231135075968921423550014486660825365236823778400273212026560515936255396339715728338833037201922656923337487213841107397075109
# n2 = 217756212730007717890554673534036379275177917547723643270840770602902290982788533846026151243642123203368841503650943535194984352879255942349438336124321871462817622245239641040894724527645158421556848873893654612288130133028946952382061938109590350001187645000237098346579285177663299700021223291447809
# n = 1303560114489951493697516509057148146923068582040771113843750330756919107450213229633558065365345194729219444852720792530763214472377936067300874720520523005684541172840550215310671582342621150219685855499438258138549174096365852739825770183435917695991524687436832099301415241336313838164102830956407279
# e = 65537
# c = 918883620925282244187871610198318634655335345295801403926746762099044495103442395097077438644224283980575779027887445228375133305078827716605344834149133947176228968779226528965957353384807439927016614228197559016244781579825667932554040052318134689224265126254585084241072477528873133866090557928603209